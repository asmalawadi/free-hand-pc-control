# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget,QMessageBox, QPushButton
import numpy as np
import cv2
import win32api
import sys
from array import array
import pyautogui
import speech_recognition as sr
r=sr.Recognizer()
import os
class Ui_Form(QWidget):
    def __init__(self):
        super().__init__()
        self.setupUi()
    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Message',
            "Are you sure to quit?", QMessageBox.Yes, QMessageBox.No)

        if reply == QMessageBox.Yes:
            cap.release()
            cv2.destroyAllWindows()
            event.accept()
        else:
            event.ignore()
        
        print ("close function")
       

    def start(self):
        # multiple cascades: https://github.com/Itseez/opencv/tree/master/data/haarcascades

        # https://github.com/Itseez/opencv/blob/master/data/haarcascades/haarcascade_frontalface_default.xml
        face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
        # https://github.com/Itseez/opencv/blob/master/data/haarcascades/haarcascade_eye.xml
        eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')
        global cap
        cap = cv2.VideoCapture(0)
        # Get initial cursor position
        xi, yi = win32api.GetCursorPos()

        # Store for 80 frames for right click
        xvalue_rclick = np.array((xi,) * 80, 'i')
        yvalue_rclick = np.array((yi,) * 80, 'i')

        n = 0

        while 1:
            ret, img = cap.read()
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
            for (x, y, w, h) in faces:
                cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
                roi_gray = gray[y:y + h, x:x + w]
                roi_color = img[y:y + h, x:x + w]
                # Get the position of cursor
                xpos = 1366 - ((int(x + w / 2) * 6) % 1366)
                ypos = (int(y + h / 2) * 7) % 768
                win32api.SetCursorPos((xpos, ypos))
                xvalue_rclick[n] = xpos
                yvalue_rclick[n] = ypos

                n = (n + 1) % 40

                xflag_rclick = 1
                yflag_rclick = 1

                for m in range(0, 40):
                    if xvalue_rclick[m] - xpos > 30 or xvalue_rclick[m] - xpos < -30:
                        xflag_rclick = 0
                    if yvalue_rclick[m] - ypos > 30 or yvalue_rclick[m] - ypos < -30:
                        yflag_rclick = 0

                if xflag_rclick and yflag_rclick:
                     with sr.Microphone() as source:
                         audio = r.listen(source)
                     try:
                         text=r.recognize_google(audio)
                         self.lineEdit.setText(text)
                         if text == 'open':
                             self.lineEdit_2.setText("double click invoked")
                             pyautogui.doubleClick(xpos, ypos)
                         elif text == 'right click':
                             self.lineEdit_2.setText("Right click invovked")
                             pyautogui.rightClick(xpos, ypos)
                         elif text == 'single-click':
                             self.lineEdit_2.setText("single click invoked")
                             pyautogui.click(xpos, ypos, 1, 3)
                         elif text == 'copy':
                             self.lineEdit_2.setText("copy invoked")
                             pyautogui.hotkey('ctrl', 'c')
                         elif text == 'paste':
                             self.lineEdit_2.setText("paste invoked")
                             pyautogui.hotkey('ctrl', 'v')
                         elif text == 'cut':
                             self.lineEdit_2.setText("cut invoked")
                             pyautogui.hotkey('ctrl', 'x')
                         elif text == 'shading':
                             self.lineEdit_2.setText("shading invoked")
                             pyautogui.hotkey('ctrl', 'a')
                         elif text == 'backward':
                             self.lineEdit_2.setText("backward invoked(ctrl+z)")
                             pyautogui.hotkey('ctrl', 'z')
                         elif text == 'language':
                             self.lineEdit_2.setText("language invoked (Alt +shift)")
                             pyautogui.hotkey('alt', 'shift')
                         elif text == 'enter':
                             self.lineEdit_2.setText("enter invoked")
                             pyautogui.press('enter')
                         elif text == 'escape':
                             self.lineEdit_2.setText("ESC invoked")
                             pyautogui.press('esc')
                         elif text == 'back':
                             self.lineEdit_2.setText("back invoked")
                             pyautogui.press('backspace')
                         elif text == 'delete':
                             self.lineEdit_2.setText("delet invoked")
                             pyautogui.press('delete')
                         elif text == 'shift':
                             self.lineEdit_2.setText("shift invoked")
                             pyautogui.press('shift')
                         elif text == 'space':
                             self.lineEdit_2.setText("space invoked")
                             pyautogui.press('space')
                         elif text == 'control':
                             self.lineEdit_2.setText("control invoked")
                             pyautogui.press('ctrl')
                         elif text == 'right':
                             self.lineEdit_2.setText("right arrow invoked")
                             pyautogui.press('right')
                         elif text == 'up':
                             self.lineEdit_2.setText("up arrow invoked")
                             pyautogui.press('up')
                         elif text == 'down':
                             self.lineEdit_2.setText("down arrow invoked")
                             pyautogui.press('down')
                         elif text == 'left':
                             self.lineEdit_2.setText("left arrow invoked")
                             pyautogui.press('left')
                         elif text == 'zero':
                             self.lineEdit_2.setText("zero invoked")
                             pyautogui.press('0')
                         elif text == 'one':
                             self.lineEdit_2.setText("one invoked")
                             pyautogui.press('1')
                         elif text == 'two':
                             self.lineEdit_2.setText("tow invoked")
                             pyautogui.press('2')
                         elif text == 'three':
                             self.lineEdit_2.setText("three invoked")
                             pyautogui.press('3')
                         elif text == 'four':
                             self.lineEdit_2.setText("four invoked")
                             pyautogui.press('4')
                         elif text == 'five':
                             self.lineEdit_2.setText("five invoked")
                             pyautogui.press('5')
                         elif text == 'six':
                             self.lineEdit_2.setText("six invoked")
                             pyautogui.press('6')
                         elif text == 'seven':
                             self.lineEdit_2.setText("seven invoked")
                             pyautogui.press('7')
                         elif text == 'eight':
                             self.lineEdit_2.setText("eight invoked")
                             pyautogui.press('8')
                         elif text == 'nine':
                             self.lineEdit_2.setText("nine invoked")
                             pyautogui.press('9')
                         elif text == 'add':
                             self.lineEdit_2.setText("plus invoked")
                             pyautogui.press('+')
                         elif text == 'minus':
                             self.lineEdit_2.setText("minus invoked")
                             pyautogui.press('-')
                         elif text == 'multiply':
                             self.lineEdit_2.setText("multiply invoked")
                             pyautogui.press('*')
                         elif text == 'divide':
                             self.lineEdit_2.setText("divide invoked")
                             pyautogui.press('/')
                         elif text == 'equal':
                             self.lineEdit_2.setText("equal invoked")
                             pyautogui.press('=')
                         elif text == 'dot':
                             self.lineEdit_2.setText("dot invoked")
                             pyautogui.press('.')
                         elif text == 'right parenthesis':
                             self.lineEdit_2.setText("right parenthesis invoked")
                             pyautogui.press(')')
                         elif text == 'left parenthesis':
                             self.lineEdit_2.setText("left parenthesis invoked")
                             pyautogui.press('(')
                         elif text == 'right bracket':
                             self.lineEdit_2.setText("right bracket invoked")
                             pyautogui.press(']')
                         elif text == 'left bracket':
                             self.lineEdit_2.setText("left bracket invoked")
                             pyautogui.press('[')
                         elif text == 'less than':
                             self.lineEdit_2.setText("less than invoked")
                             pyautogui.press('<')
                         elif text == 'greater than':
                             self.lineEdit_2.setText("greater than invoked")
                             pyautogui.press('>')
                         elif text == 'percent':
                             self.lineEdit_2.setText("percent invoked")
                             pyautogui.press('%')
                         elif text == 'underscore':
                             self.lineEdit_2.setText("underscore invoked")
                             pyautogui.press('_')
                         elif text == 'vertical bar':
                             self.lineEdit_2.setText("vertical bar invoked")
                             pyautogui.press('|')
                         elif text == 'backslash':
                             self.lineEdit_2.setText("backslash invoked")
                             pyautogui.press('\n')
                         elif text == 'quotation':
                             self.lineEdit_2.setText("quotation invoked")
                             pyautogui.press(',')
                         elif text == 'semicolon':
                             self.lineEdit_2.setText("semicolon invoked")
                             pyautogui.press(';')
                         elif text == 'colon':
                             self.lineEdit_2.setText("colon invoked")
                             pyautogui.press(':')
                         elif text == 'double quotes':
                             self.lineEdit_2.setText("double quotes invoked")
                             pyautogui.press('"')
                         elif text == 'question mark':
                             self.lineEdit_2.setText("question mark invoked")
                             pyautogui.press('?')
                         elif text == 'marvel mark':
                             self.lineEdit_2.setText("marvel mark invoked")
                             pyautogui.press('!')
                         elif text == 'ampersand':
                             self.lineEdit_2.setText("ampersand invoked")
                             pyautogui.press('&')
                         elif text == 'dollar':
                             self.lineEdit_2.setText("dollar invoked")
                             pyautogui.press('$')
                         elif text == 'number':
                             self.lineEdit_2.setText("number invoked")
                             pyautogui.press('#')
                         elif text == 'at symbol':
                             self.lineEdit_2.setText("at symbol invoked")
                             pyautogui.press('@')
                         elif text == 'caret':
                             self.lineEdit_2.setText("caret invoked")
                             pyautogui.press('^')
                         else:
                             self.lineEdit_2.setText("write invoked")
                             pyautogui.write(text)

                     except:
                         self.lineEdit.setText('sorry could not recognize your voice')

                






            #cv2.imshow('img', img)
            k = cv2.waitKey(30) & 0xff
            if k == 27:
                break

        cap.release()
        cv2.destroyAllWindows()

    
            
         
    def setupUi(self):
        self.setObjectName("Form")
        self.resize(393, 185)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QtCore.QSize(393, 185))
        self.setMaximumSize(QtCore.QSize(393, 185))
        self.move(950,40)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/rec/run.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.setStyleSheet("QWidget {\n"
"    background-color:#ffffff;\n"
"}\n"
"QLineEdit {\n"
"    background-color:#ebecff;\n"
"    border-width: 1px;\n"
"    border-style: rounded;\n"
"    border-color:#ebecff ;\n"
"   border-radius:10px;\n"
"}\n"
"QPushButton{\n"
"   background-color:#2566b5;\n"
"   font-color:#ffffff;\n"
"}")
        self.lineEdit = QtWidgets.QLineEdit(self)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(130, 40, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        font.setPointSize(10)
        font.setKerning(True)
        self.lineEdit.setFont(font)
        self.lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setPlaceholderText("say anything")
        self.lineEdit.setObjectName("lineEdit")
        ################################################
        #self.lineEdit.setText(text)
        ####################################

        self.lineEdit_2 = QtWidgets.QLineEdit(self)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 90, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        font.setPointSize(10)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_2.setText("")
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setCursorMoveStyle(QtCore.Qt.LogicalMoveStyle)
        self.lineEdit_2.setClearButtonEnabled(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(60, 40, 31, 31))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/rec/mic.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self)
        self.label_2.setGeometry(QtCore.QRect(60, 90, 31, 31))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap(":/rec/ch4.jpg"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(264, 140, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        font.setPointSize(11)
        ###############bush event################33########
        self.pushButton.clicked.connect(self.start)
        ###################################################
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setToolTipDuration(-1)
        self.pushButton.setStyleSheet("QPushButton{\n"
"\n"
"color:white;\n"
"\n"
"border-radius:15px;\n"
"\n"
"\n"
"}\n"
":hover {\n"
"background: #6169ff;\n"
"\n"
"text-decoration: none;\n"
"\n"
"}")
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi()
        #QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Free Hand Pc Control"))
        self.lineEdit_2.setPlaceholderText(_translate("Form", "PC command"))
        self.pushButton.setToolTip(_translate("Form", "press to start"))
        self.pushButton.setText(_translate("Form", "start"))

import img2_rc
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_Form()
    ui.show()
    sys.exit(app.exec_())
    os._exit(0)
